import org.openhab.core.library.types.*
import org.openhab.model.script.actions.*

val String APIKey = "INSERT-API-KEY"
val String PodID = "INSERT-POD-ID"

var Boolean PodBoolean

/*** Read Sensibo State ***/

rule "Read Sensibo State"

  when
    System started
  then

  try {
    var String PodStatus = executeCommandLine('curl -sSH "Accept: application/json"     "https://home.sensibo.com/api/v2/pods/' + PodID + '/acStates?apiKey=' + APIKey + '&limit=1&fields=acState"', 5000)

    if (PodStatus.contains('"status": "success"')) {
      val String PodOn = (transform("JSONPATH", "$.result[0].acState.on", PodStatus))
      val String PodMode = (transform("JSONPATH", "$.result[0].acState.mode", PodStatus))
      val Number PodTarget = new Integer(transform("JSONPATH", "$.result[0].acState.targetTemperature", PodStatus))
      val String PodFan = (transform("JSONPATH", "$.result[0].acState.fanLevel", PodStatus))

      if (PodOn == "true")
        {   postUpdate(SensiboState, ON)   }

      if (PodOn == "false")
        {   postUpdate(SensiboState, OFF)  }   

      postUpdate(SensiboTarget, PodTarget)
      postUpdate(SensiboMode, PodMode)
      postUpdate(SensiboFan, PodFan)
    }
    else {
      logError("Pod state", "Error reading from Sensibo API")
    }
  }

  catch(Throwable t) {
    logError("Sensibo read state", "Error was caught: {}", t)
  }

end
  
/*** Read Sensibo Temperature and Humidity ***/

rule "Read Sensibo Temp and Humidity"

  when
    System started or
    Time cron "0 0/5 * * * ?"
  then

  try {
    var String PodMeasurements = executeCommandLine('curl -sSH "Accept: application/json"     "https://home.sensibo.com/api/v2/pods/' + PodID + '/measurements?apiKey=' + APIKey + '&fields=temperature,humidity"', 5000)

    if (PodMeasurements.contains('"status": "success"')) {
      val Number PodTemperature = new Double(transform("JSONPATH", "$.result[0].temperature", PodMeasurements))
      val Number PodHumidity = new Double(transform("JSONPATH", "$.result[0].humidity", PodMeasurements))

      postUpdate(SensiboTemp, PodTemperature)
      postUpdate(SensiboHumidity, PodHumidity)
    }
    else {
      logError("Pod temp and humidity", "Error reading from Sensibo API")
    }
  }
  
  catch(Throwable e) {
    logError("Sensibo read temp and humidity", "Error was caught: {}", e)
  }

end

/*** Read Sensibo Battery (v1 Pods only) ***/

rule "Read Sensibo Battery"

  when
    System started or
    Time cron "0 0 * * * ?"
  then

  try {
    var String PodMeasurements = executeCommandLine('curl -sSH "Accept: application/json"     "https://home.sensibo.com/api/v2/pods/' + PodID + '/measurements?apiKey=' + APIKey + '&fields=batteryVoltage"', 5000)

    if (PodMeasurements.contains('"status": "success"')) {
      val Number PodBattery = new Integer(transform("JSONPATH", "$.result[0].batteryVoltage", PodMeasurements))
      postUpdate(SensiboBattery, PodBattery)
    }
    else {
      logError("Pod battery", "Error reading from Sensibo API")
    }
  }
  
  catch(Throwable e) {
    logError("Sensibo read battery", "Error was caught: {}", e)
  }

end

/*** Write Sensibo State ***/

rule "Write Sensibo State"

  when
    Item SensiboState changed or
    Item SensiboMode received command or
    Item SensiboFan received command or
    Item SensiboTarget received command
  then
  
  try {

    if (SensiboState.state == ON) {
      PodBoolean = true 
    }
    else {
      PodBoolean = false 
    }

    var String CommandURL = 'https://home.sensibo.com/api/v2/pods/' + PodID + '/acStates?apiKey=' + APIKey

    var String CommandState = '{"acState":{"on":' + PodBoolean + ','
    var String CommandMode = '"mode":"' + SensiboMode.state + '",'
    var String CommandFan = '"fanLevel":"' + SensiboFan.state + '",'
    var String CommandTemp = '"targetTemperature":' + (SensiboTarget.state as DecimalType).intValue + '}}'
    var String CommandData = CommandState + CommandMode + CommandFan + CommandTemp

    var String UpdateResult = executeCommandLine('curl@@-sSH@@"Content-Type: application/json"@@-XPOST@@' + CommandURL + '@@-d@@'+ CommandData, 10000)
    logInfo("Update result", UpdateResult)

    if (!UpdateResult.contains('"status": "success"')) {
      Thread::sleep(5000)
      sendCommand(SensiboMode, SensiboMode.state)
    }
  }

  catch(Throwable t) {
    logError("Sensibo write", "Error was caught: {}", t)
  }

end
